package app.pluct.ui.components

import android.annotation.SuppressLint
import android.content.Context
import android.graphics.Bitmap
import android.util.Log
import android.webkit.*
import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Close
import androidx.compose.material.icons.filled.ContentCopy
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import kotlinx.coroutines.delay

    /**
     * ScriptTokAuditWebView - Enhanced WebView component for transcript extraction
     * 
     * This component has been optimized for:
     * - Better stability and error handling
     * - Improved performance and resource usage
     * - More consistent transcript extraction
     * - Enhanced UX with processing indicators
     */
    @SuppressLint("SetJavaScriptEnabled")
    @OptIn(ExperimentalMaterial3Api::class)
    @Composable
    fun ScriptTokAuditWebView(
        videoUrl: String,
        onTranscriptReceived: (String) -> Unit,
        onClose: () -> Unit
    ) {
        val context = LocalContext.current
        var webView: WebView? by remember { mutableStateOf(null) }
        var transcriptText by remember { mutableStateOf("") }
        var showTranscriptDialog by remember { mutableStateOf(false) }
        var errorMessage by remember { mutableStateOf("") }
        var showErrorDialog by remember { mutableStateOf(false) }
                 var showNoTranscriptDialog by remember { mutableStateOf(false) }
         var webViewError by remember { mutableStateOf<String?>(null) }
         var isProcessing by remember { mutableStateOf(false) }
         var loadingProgress by remember { mutableStateOf(0) }
         var statusMessage by remember { mutableStateOf("Loading...") }
         var showTimeoutDialog by remember { mutableStateOf(false) }
         var webViewLoadTimeout by remember { mutableStateOf(false) }
         var webViewLoadStartTime by remember { mutableStateOf(0L) }
         val TAG = "PluctWebView"
        
        // Track performance metrics
        val startTime = remember { System.currentTimeMillis() }

    Log.d(TAG, "Opening script.tokaudit.io for URL: $videoUrl")

    // Preload WebView configuration
    val webViewConfig = remember {
        WebView.enableSlowWholeDocumentDraw()
        object {
            fun configureWebView(webView: WebView) {
                webView.settings.apply {
                    // Essential settings for script.tokaudit.io
                    javaScriptEnabled = true
                    domStorageEnabled = true
                    
                    // Performance optimizations
                    cacheMode = WebSettings.LOAD_DEFAULT
                    
                    // More efficient resource loading
                    loadsImagesAutomatically = true
                    blockNetworkImage = false
                    
                    // Security settings
                    mixedContentMode = WebSettings.MIXED_CONTENT_COMPATIBILITY_MODE
                    allowContentAccess = true
                    
                    // Modern browsing features
                    databaseEnabled = true
                    allowFileAccess = false
                    
                    // Additional stability settings
                    setSupportMultipleWindows(false)
                    setSupportZoom(false)
                    builtInZoomControls = false
                    displayZoomControls = false
                    
                    // Mobile-optimized user agent
                    userAgentString = "Mozilla/5.0 (Linux; Android 13; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36"
                    
                    // Additional settings for better compatibility
                    mediaPlaybackRequiresUserGesture = false
                    
                    // Enable all necessary features
                    setGeolocationEnabled(false)
                    
                    // Set viewport meta tag support
                    loadWithOverviewMode = true
                    useWideViewPort = true
                    
                    // Memory management settings
                    setAppCacheEnabled(false) // Deprecated but still used on some devices
                    
                    // Reduce memory usage
                    setEnableSmoothTransition(false)
                }
            }
        }
    }
    
    // Cleanup WebView resources when component is disposed
    DisposableEffect(Unit) {
        onDispose {
            // Clean up WebView resources to prevent memory leaks
            try {
                webView?.apply {
                    Log.d(TAG, "Cleaning up WebView resources")
                    // Stop any ongoing loads
                    stopLoading()
                    
                    // Clear all data
                    clearHistory()
                    clearCache(true)
                    clearFormData()
                    clearSslPreferences()
                    clearMatches()
                    
                    // Remove JavaScript interfaces
                    removeJavascriptInterface("Android")
                    
                    // Destroy the WebView properly
                    onPause()
                    removeAllViews()
                    destroy()
                }
            } catch (e: Exception) {
                Log.e(TAG, "Error during WebView cleanup", e)
            }
            
            // Log performance metrics
            val totalTime = System.currentTimeMillis() - startTime
            Log.d(TAG, "WebView component disposed after ${totalTime}ms")
        }
    }
    
    // Load URL with retry mechanism
    LaunchedEffect(webView) {
        webView?.let {
            Log.d(TAG, "Starting WebView load at ${System.currentTimeMillis() - startTime}ms")
            webViewLoadStartTime = System.currentTimeMillis()
            statusMessage = "Loading script.tokaudit.io..."
            
            // Try to load the URL with retries
            var loadAttempts = 0
            val maxLoadAttempts = 3
            
            while (loadAttempts < maxLoadAttempts) {
                try {
                    loadAttempts++
                    Log.d(TAG, "Loading URL attempt $loadAttempts: https://www.script.tokaudit.io/")
                    
                    // Clear any previous state
                    it.clearHistory()
                    
                    // Load the URL
                    it.loadUrl("https://www.script.tokaudit.io/")
                    
                    // Break the retry loop if we've loaded successfully
                    break
                } catch (e: Exception) {
                    Log.e(TAG, "Error loading URL (attempt $loadAttempts/$maxLoadAttempts)", e)
                    
                    if (loadAttempts >= maxLoadAttempts) {
                        // All attempts failed
                        webViewError = "Failed to load after $maxLoadAttempts attempts: ${e.message}"
                        showErrorDialog = true
                    } else {
                        // Wait before retrying
                        delay(1000)
                    }
                }
            }
        }
    }
    
    // Separate LaunchedEffect for timeout to avoid keeping completed coroutines
    LaunchedEffect(Unit) {
        // Start timeout counter
        val timeoutMs = 30000L // 30 seconds timeout
        try {
            // Wait for timeout period
            delay(timeoutMs)
            
            // Only trigger timeout if page hasn't loaded completely
            if (loadingProgress < 100 && !webViewLoadTimeout) {
                Log.w(TAG, "WebView load timeout detected after ${timeoutMs}ms")
                webViewLoadTimeout = true
                statusMessage = "Loading timeout - trying fallback"
                webViewError = "WebView failed to load within 30 seconds. Please check your internet connection."
                showErrorDialog = true
            }
        } catch (e: CancellationException) {
            // Coroutine was cancelled, which is expected when component is disposed
            Log.d(TAG, "WebView timeout coroutine cancelled (normal behavior)")
        }
    }
    
    // Monitor WebView state
    LaunchedEffect(loadingProgress) {
        if (loadingProgress == 100) {
            Log.d(TAG, "WebView fully loaded, cancelling timeout")
            // Page is fully loaded, no need for timeout
            webViewLoadTimeout = false
        }
    }

    Column(modifier = Modifier.fillMaxSize()) {
        // Top bar
        TopAppBar(
            title = { Text("Get Transcript") },
            navigationIcon = {
                IconButton(onClick = onClose) {
                    Icon(Icons.Default.Close, contentDescription = "Close")
                }
            },
            actions = {
                if (transcriptText.isNotEmpty()) {
                    IconButton(
                        onClick = {
                            onTranscriptReceived(transcriptText)
                            onClose()
                        }
                    ) {
                        Icon(Icons.Default.ContentCopy, contentDescription = "Use Transcript")
                    }
                }
            }
        )

        AndroidView(
            modifier = Modifier.fillMaxSize(),
            factory = { ctx ->
                // Create WebView with hardware acceleration enabled
                val webViewInstance = WebView(ctx)
                
                // Store reference to the WebView
                webView = webViewInstance
                
                // Apply our pre-configured settings
                webViewConfig.configureWebView(webViewInstance)
                
                // Add JavaScript interface for communication
                webViewInstance.addJavascriptInterface(
                    WebAppInterface(
                        context,
                        onTranscript = { transcript ->
                            Log.d(TAG, "Transcript received from JS: $transcript")
                            transcriptText = transcript
                            showTranscriptDialog = true
                            isProcessing = false
                        },
                        onError = { error ->
                            Log.e(TAG, "Error from JS: $error")
                            errorMessage = error
                            showErrorDialog = true
                            isProcessing = false
                        },
                        onNoTranscript = {
                            Log.d(TAG, "No transcript available from JS")
                            showNoTranscriptDialog = true
                            isProcessing = false
                        },
                        onProcessing = { processing ->
                            isProcessing = processing
                        }
                    ), 
                    "Android"
                )
                
                // Configure WebView client
                webViewInstance.webViewClient = object : WebViewClient() {
                        override fun onPageStarted(view: WebView?, url: String?, favicon: Bitmap?) {
                            super.onPageStarted(view, url, favicon)
                            Log.d(TAG, "Page started loading: $url")
                            statusMessage = "Loading page..."
                            isProcessing = true
                        }
                        
                        override fun onPageFinished(view: WebView?, url: String?) {
                            super.onPageFinished(view, url)
                            Log.d(TAG, "Page finished loading: $url")
                            Log.d(TAG, "Current URL matches expected: ${url == "https://www.script.tokaudit.io/"}")
                            if (url == "https://www.script.tokaudit.io/") {
                                statusMessage = "Page loaded, starting automation..."
                                Log.d(TAG, "Page loaded successfully, scheduling JavaScript injection")
                                // Wait a bit for the page to fully load
                                view?.postDelayed({
                                    Log.d(TAG, "Starting JavaScript injection after page load")
                                    statusMessage = "Initializing automation..."
                                    view.evaluateJavascript(
                                        """
                                        (function() {
                                            console.log('PluctWebView: Starting enhanced automation for URL: ${videoUrl}');
                                            
                                            // Global error handler
                                            window.onerror = function(message, source, lineno, colno, error) {
                                                console.error('PluctWebView: JavaScript error:', message);
                                                Android.onError('JavaScript error: ' + message);
                                                return true;
                                            };
                                            
                                            // Enhanced modal closing function
                                            function closeModals() {
                                                try {
                                                    // Close bulk download modal
                                                    const bulkModal = document.querySelector('.bulk-download-modal-parent');
                                                    if (bulkModal) {
                                                        bulkModal.style.display = 'none';
                                                        console.log('PluctWebView: Closed bulk download modal');
                                                    }
                                                    
                                                    // Close any other modals
                                                    const modals = document.querySelectorAll('.modal, [role="dialog"], .popup');
                                                    modals.forEach(modal => {
                                                        if (modal.style.display !== 'none') {
                                                            modal.style.display = 'none';
                                                            console.log('PluctWebView: Closed modal');
                                                        }
                                                    });
                                                    
                                                    // Remove overlays
                                                    const overlays = document.querySelectorAll('.modal-backdrop, .overlay');
                                                    overlays.forEach(overlay => overlay.remove());
                                                    
                                                    // Close any other modals by clicking outside
                                                    const additionalModals = document.querySelectorAll('.modal, [role="dialog"], .popup');
                                                    additionalModals.forEach(modal => {
                                                        if (modal.style.display !== 'none') {
                                                            modal.style.display = 'none';
                                                            console.log('PluctWebView: Closed modal by hiding it');
                                                        }
                                                    });
                                                    
                                                    // Remove overlay backgrounds
                                                    const additionalOverlays = document.querySelectorAll('.modal-backdrop, .overlay, [class*="overlay"]');
                                                    additionalOverlays.forEach(overlay => {
                                                        overlay.remove();
                                                        console.log('PluctWebView: Removed overlay');
                                                    });
                                                    
                                                    // Click outside to close any remaining modals
                                                    document.body.click();
                                                } catch (error) {
                                                    console.error('PluctWebView: Error closing modals:', error);
                                                }
                                            }
                                            }
                                            
                                            // Enhanced URL normalization
                                            function normalizeTikTokUrl(url) {
                                                console.log('PluctWebView: Normalizing URL:', url);
                                                // script.tokaudit.io works best with vm.tiktok.com URLs
                                                if (url.includes('vm.tiktok.com')) {
                                                    console.log('PluctWebView: URL is already vm.tiktok.com format');
                                                    return url; // Keep vm.tiktok.com URLs as-is
                                                } else if (url.includes('tiktok.com/@')) {
                                                    // For full tiktok.com URLs, try to extract video ID
                                                    const match = url.match(/tiktok\.com\/@[^\/]+\/video\/(\d+)/);
                                                    if (match) {
                                                        const extractedVideoId = match[1];
                                                        const normalizedUrl = 'https://vm.tiktok.com/ZMA' + extractedVideoId.substring(0, 6) + '/';
                                                        console.log('PluctWebView: Converted to vm.tiktok.com format:', normalizedUrl);
                                                        return normalizedUrl;
                                                    }
                                                }
                                                console.log('PluctWebView: Could not normalize URL, using as-is');
                                                return url;
                                            }
                                            
                                            // Enhanced input filling and submission with robust selectors
                                            function fillAndSubmit(urlToTry) {
                                                console.log('PluctWebView: Attempting to fill and submit URL:', urlToTry);
                                                
                                                // Try multiple selectors for the input field
                                                const possibleInputSelectors = [
                                                    'textarea[placeholder="Enter Video Url"]',
                                                    'textarea[placeholder*="Video"]',
                                                    'textarea[placeholder*="URL"]',
                                                    'textarea[placeholder*="Url"]',
                                                    'input[placeholder*="Video"]',
                                                    'input[placeholder*="URL"]',
                                                    'input[type="text"]',
                                                    'textarea'
                                                ];
                                                
                                                let inputField = null;
                                                
                                                // Try each selector until we find a match
                                                for (const selector of possibleInputSelectors) {
                                                    const element = document.querySelector(selector);
                                                    if (element) {
                                                        inputField = element;
                                                        console.log('PluctWebView: Found input field with selector:', selector);
                                                        break;
                                                    }
                                                }
                                                
                                                // If we still don't have an input field, look for any visible input
                                                if (!inputField) {
                                                    const allInputs = document.querySelectorAll('input, textarea');
                                                    for (const input of allInputs) {
                                                        if (input.offsetParent !== null) { // Check if visible
                                                            inputField = input;
                                                            console.log('PluctWebView: Found visible input as fallback');
                                                            break;
                                                        }
                                                    }
                                                }
                                                
                                                if (inputField) {
                                                    // Focus the input field first
                                                    inputField.focus();
                                                    
                                                    // Clear existing value
                                                    inputField.value = '';
                                                    
                                                    // Set new value with multiple methods for maximum compatibility
                                                    inputField.value = urlToTry;
                                                    
                                                    // Dispatch multiple events to ensure the change is registered
                                                    const events = ['input', 'change', 'keyup', 'blur'];
                                                    events.forEach(eventType => {
                                                        inputField.dispatchEvent(new Event(eventType, { bubbles: true }));
                                                    });
                                                    
                                                    console.log('PluctWebView: Filled input field with:', urlToTry);
                                                    
                                                    // Enhanced button finding with multiple strategies
                                                    const buttonSelectors = [
                                                        // Text content based selectors
                                                        button => button.textContent.trim() === 'START',
                                                        button => button.textContent.trim().toUpperCase().includes('START'),
                                                        button => button.textContent.trim().toUpperCase().includes('SUBMIT'),
                                                        button => button.textContent.trim().toUpperCase().includes('GO'),
                                                        button => button.textContent.trim().toUpperCase().includes('PROCESS'),
                                                        
                                                        // Attribute based selectors
                                                        button => button.getAttribute('type') === 'submit',
                                                        button => button.classList.contains('submit'),
                                                        button => button.classList.contains('primary'),
                                                        
                                                        // Position based - last resort
                                                        button => button.closest('form') === inputField.closest('form')
                                                    ];
                                                    
                                                    // Get all buttons
                                                    const buttons = Array.from(document.querySelectorAll('button'));
                                                    
                                                    // Try each strategy until we find a button
                                                    let startButton = null;
                                                    for (const selector of buttonSelectors) {
                                                        startButton = buttons.find(selector);
                                                        if (startButton) {
                                                            console.log('PluctWebView: Found button using strategy:', selector.toString().substring(0, 50) + '...');
                                                            break;
                                                        }
                                                    }
                                                    
                                                    if (startButton) {
                                                        console.log('PluctWebView: Found button, clicking...');
                                                        
                                                        // Try multiple click methods
                                                        try {
                                                            // Standard click
                                                            startButton.click();
                                                            
                                                            // Dispatch multiple events as fallback
                                                            ['mousedown', 'mouseup', 'click'].forEach(eventType => {
                                                                startButton.dispatchEvent(new MouseEvent(eventType, {
                                                                    bubbles: true,
                                                                    cancelable: true,
                                                                    view: window
                                                                }));
                                                            });
                                                            
                                                            console.log('PluctWebView: Button clicked successfully');
                                                            return true;
                                                        } catch (e) {
                                                            console.error('PluctWebView: Error clicking button:', e);
                                                        }
                                                    }
                                                    
                                                    // If button click failed, try submitting the form directly
                                                    const form = inputField.closest('form');
                                                    if (form) {
                                                        try {
                                                            console.log('PluctWebView: Submitting form directly');
                                                            form.submit();
                                                            return true;
                                                        } catch (e) {
                                                            console.error('PluctWebView: Error submitting form:', e);
                                                        }
                                                    }
                                                    
                                                    // Last resort: press Enter key in the input field
                                                    try {
                                                        console.log('PluctWebView: Trying Enter key as last resort');
                                                        inputField.dispatchEvent(new KeyboardEvent('keydown', {
                                                            key: 'Enter',
                                                            code: 'Enter',
                                                            keyCode: 13,
                                                            which: 13,
                                                            bubbles: true
                                                        }));
                                                        return true;
                                                    } catch (e) {
                                                        console.error('PluctWebView: Error sending Enter key:', e);
                                                    }
                                                } else {
                                                    console.log('PluctWebView: Could not find any input field');
                                                }
                                                
                                                return false;
                                            }
                                            
                                            // Enhanced transcript detection and extraction
                                            function checkForTranscript() {
                                                const pageText = document.body.textContent || '';
                                                
                                                // Check for "Subtitles Not Available" first
                                                if (pageText.includes('Subtitles Not Available')) {
                                                    console.log('PluctWebView: Found: Subtitles Not Available');
                                                    Android.onNoTranscript();
                                                    return true;
                                                }
                                                
                                                // Check for other "no transcript" variations
                                                const noTranscriptTexts = [
                                                    'No transcript',
                                                    'No subtitles',
                                                    'Transcript not available',
                                                    'No captions available'
                                                ];
                                                
                                                for (let noTranscriptText of noTranscriptTexts) {
                                                    if (pageText.toLowerCase().includes(noTranscriptText.toLowerCase())) {
                                                        console.log('PluctWebView: No transcript available:', noTranscriptText);
                                                        Android.onNoTranscript();
                                                        return true;
                                                    }
                                                }
                                                
                                                // Check for error messages
                                                const errorTexts = [
                                                    'No valid tiktok data found',
                                                    'Invalid URL',
                                                    'Error processing',
                                                    'Failed to process',
                                                    'Something went wrong'
                                                ];
                                                
                                                for (let errorText of errorTexts) {
                                                    if (pageText.toLowerCase().includes(errorText.toLowerCase())) {
                                                        console.log('PluctWebView: Found error:', errorText);
                                                        Android.onError('Error: ' + errorText);
                                                        return true;
                                                    }
                                                }
                                                
                                                // Look for success indicators (copy buttons, download buttons)
                                                const buttons = document.querySelectorAll('button');
                                                let foundSuccess = false;
                                                for (let button of buttons) {
                                                    if (button.textContent.toLowerCase().includes('copy') || 
                                                        button.textContent.toLowerCase().includes('download')) {
                                                        foundSuccess = true;
                                                        break;
                                                    }
                                                }
                                                
                                                if (foundSuccess) {
                                                    console.log('PluctWebView: Found success indicators, extracting transcript');
                                                    
                                                    // Try to extract transcript text from various selectors
                                                    const transcriptSelectors = [
                                                        '[class*="transcript"]',
                                                        '[class*="subtitle"]',
                                                        '[class*="text"]',
                                                        '.result',
                                                        '.output',
                                                        '.content',
                                                        'div'
                                                    ];
                                                    
                                                    for (let selector of transcriptSelectors) {
                                                        const elements = document.querySelectorAll(selector);
                                                        for (let element of elements) {
                                                            const text = element.textContent?.trim();
                                                            if (text && text.length > 100 &&
                                                                !text.includes('script.tokaudit.io') &&
                                                                !text.includes('TikTok') &&
                                                                !text.includes('Transcript') &&
                                                                !text.includes('Generator') &&
                                                                !text.includes('About') &&
                                                                !text.includes('FAQ') &&
                                                                !text.includes('Download') &&
                                                                !text.includes('START') &&
                                                                !text.includes('Enter Video Url') &&
                                                                !text.includes('Copy') &&
                                                                !text.includes('copy')) {
                                                                
                                                                console.log('PluctWebView: Found transcript:', text.substring(0, 100) + '...');
                                                                Android.onTranscriptReceived(text);
                                                                return true;
                                                            }
                                                        }
                                                    }
                                                    
                                                    // Fallback: extract from page body
                                                    const lines = pageText.split('\\n').filter(line =>
                                                        line.trim().length > 50 &&
                                                        !line.includes('script.tokaudit.io') &&
                                                        !line.includes('TikTok') &&
                                                        !line.includes('Transcript') &&
                                                        !line.includes('Generator') &&
                                                        !line.includes('About') &&
                                                        !line.includes('FAQ') &&
                                                        !line.includes('Download') &&
                                                        !line.includes('START') &&
                                                        !line.includes('Enter Video Url') &&
                                                        !line.includes('Copy') &&
                                                        !line.includes('copy')
                                                    );
                                                    
                                                    if (lines.length > 0) {
                                                        const potentialTranscript = lines.join('\\n').substring(0, 3000);
                                                        console.log('PluctWebView: Extracted transcript from page body');
                                                        Android.onTranscriptReceived(potentialTranscript);
                                                        return true;
                                                    }
                                                }
                                                
                                                return false;
                                            }
                                            
                                            // Enhanced main execution flow with improved reliability
                                            async function main() {
                                                try {
                                                    Android.onProcessing(true);
                                                    console.log('PluctWebView: Starting enhanced main execution');
                                                    
                                                    // Set global error handler for uncaught exceptions
                                                    window.onerror = function(message, source, lineno, colno, error) {
                                                        console.error('PluctWebView: Uncaught error:', message);
                                                        // Don't immediately report errors to Android - some are expected
                                                        // We'll handle critical errors separately
                                                        return true; // Prevent default error handling
                                                    };
                                                    
                                                    // Check if page is ready
                                                    function isPageReady() {
                                                        // Check for common indicators that the page is ready
                                                        const hasInput = document.querySelector('input, textarea');
                                                        const hasButtons = document.querySelectorAll('button').length > 0;
                                                        const bodyHasContent = document.body.textContent.length > 500;
                                                        
                                                        return hasInput || hasButtons || bodyHasContent;
                                                    }
                                                    
                                                    // Wait for page to be ready with timeout
                                                    let pageReadyAttempts = 0;
                                                    const maxPageReadyAttempts = 10;
                                                    
                                                    while (!isPageReady() && pageReadyAttempts < maxPageReadyAttempts) {
                                                        pageReadyAttempts++;
                                                        console.log(`PluctWebView: Waiting for page to be ready (attempt ${pageReadyAttempts}/${maxPageReadyAttempts})`);
                                                        await new Promise(resolve => setTimeout(resolve, 1000));
                                                    }
                                                    
                                                    if (!isPageReady()) {
                                                        console.error('PluctWebView: Page not ready after multiple attempts');
                                                        Android.onError('Page did not load properly. Please check your internet connection and try again.');
                                                        return;
                                                    }
                                                    
                                                    console.log('PluctWebView: Page is ready, proceeding with automation');
                                                    
                                                    // First, close any modals with retry mechanism
                                                    console.log('PluctWebView: Starting modal closing process');
                                                    let modalsAttempts = 0;
                                                    const maxModalAttempts = 5; // Increased from 3
                                                    
                                                    async function attemptCloseModals() {
                                                        modalsAttempts++;
                                                        console.log('PluctWebView: Closing modals, attempt ' + modalsAttempts);
                                                        
                                                        try {
                                                            closeModals();
                                                            
                                                            // Check if modals are still present
                                                            const modalSelectors = [
                                                                '.modal', 
                                                                '.popup', 
                                                                '.bulk-download-modal-parent', 
                                                                '[role="dialog"]',
                                                                '.overlay',
                                                                '.modal-backdrop',
                                                                '[class*="modal"]',
                                                                '[class*="popup"]',
                                                                '[class*="dialog"]'
                                                            ];
                                                            
                                                            let stillHasModals = false;
                                                            
                                                            for (const selector of modalSelectors) {
                                                                const elements = document.querySelectorAll(selector);
                                                                for (const el of elements) {
                                                                    // Check if element is visible
                                                                    if (el.offsetParent !== null) {
                                                                        stillHasModals = true;
                                                                        console.log(`PluctWebView: Found visible modal with selector: ${selector}`);
                                                                        break;
                                                                    }
                                                                }
                                                                if (stillHasModals) break;
                                                            }
                                                            
                                                            if (stillHasModals && modalsAttempts < maxModalAttempts) {
                                                                console.log('PluctWebView: Modals still detected, retrying...');
                                                                // Try clicking outside the modal
                                                                document.body.click();
                                                                // Try pressing Escape key
                                                                document.dispatchEvent(new KeyboardEvent('keydown', {
                                                                    key: 'Escape',
                                                                    code: 'Escape',
                                                                    keyCode: 27,
                                                                    which: 27,
                                                                    bubbles: true
                                                                }));
                                                                
                                                                await new Promise(resolve => setTimeout(resolve, 500));
                                                                return attemptCloseModals();
                                                            }
                                                        } catch (e) {
                                                            console.error('PluctWebView: Error while closing modals:', e);
                                                            if (modalsAttempts < maxModalAttempts) {
                                                                await new Promise(resolve => setTimeout(resolve, 500));
                                                                return attemptCloseModals();
                                                            }
                                                        }
                                                    }
                                                    
                                                    // Attempt to close modals with retries
                                                    await attemptCloseModals();
                                                    console.log('PluctWebView: Modal closing completed');
                                                    
                                                    // Wait for the page to fully settle
                                                    console.log('PluctWebView: Waiting for page to settle');
                                                    await new Promise(resolve => setTimeout(resolve, 2000)); // Increased from 1500ms
                                                    
                                                    // Try multiple URL formats if needed
                                                    const originalUrl = '${videoUrl}';
                                                    const urlsToTry = [];
                                                    
                                                    // Add the original URL first
                                                    urlsToTry.push(originalUrl);
                                                    
                                                    // Try to normalize the URL
                                                    try {
                                                        const normalizedUrl = normalizeTikTokUrl(originalUrl);
                                                        if (normalizedUrl !== originalUrl) {
                                                            urlsToTry.push(normalizedUrl);
                                                        }
                                                    } catch (urlError) {
                                                        console.error('PluctWebView: URL normalization error:', urlError);
                                                    }
                                                    
                                                    // If we have a full TikTok URL, also try a simpler format
                                                    if (originalUrl.includes('tiktok.com/@')) {
                                                        try {
                                                            const simpleUrl = originalUrl.split('?')[0];
                                                            if (simpleUrl !== originalUrl) {
                                                                urlsToTry.push(simpleUrl);
                                                            }
                                                        } catch (e) {
                                                            console.error('PluctWebView: Error creating simple URL:', e);
                                                        }
                                                    }
                                                    
                                                    // Add additional URL variants
                                                    if (originalUrl.includes('vm.tiktok.com')) {
                                                        try {
                                                            // Try without https:// prefix
                                                            const noHttpsUrl = originalUrl.replace('https://', '');
                                                            urlsToTry.push(noHttpsUrl);
                                                            
                                                            // Try with www. prefix if not present
                                                            if (!originalUrl.includes('www.')) {
                                                                const wwwUrl = originalUrl.replace('https://', 'https://www.');
                                                                urlsToTry.push(wwwUrl);
                                                            }
                                                        } catch (e) {
                                                            console.error('PluctWebView: Error creating URL variants:', e);
                                                        }
                                                    }
                                                    
                                                    console.log('PluctWebView: Will try these URLs:', urlsToTry);
                                                    
                                                    // Try each URL format until one works
                                                    let success = false;
                                                    
                                                    for (const urlToTry of urlsToTry) {
                                                        if (success) break;
                                                        
                                                        console.log('PluctWebView: Trying URL:', urlToTry);
                                                        
                                                        // Try to fill and submit with retry for this URL
                                                        let fillAttempts = 0;
                                                        const maxFillAttempts = 5; // Increased from 3
                                                        
                                                        while (!success && fillAttempts < maxFillAttempts) {
                                                            fillAttempts++;
                                                            console.log('PluctWebView: Fill attempt ' + fillAttempts + ' with URL: ' + urlToTry);
                                                            
                                                            // Wait a bit longer between attempts
                                                            if (fillAttempts > 1) {
                                                                await new Promise(resolve => setTimeout(resolve, 1500));
                                                            }
                                                            
                                                            success = fillAndSubmit(urlToTry);
                                                            
                                                            if (!success && fillAttempts < maxFillAttempts) {
                                                                console.log('PluctWebView: Fill failed, retrying...');
                                                                await new Promise(resolve => setTimeout(resolve, 1000));
                                                            }
                                                        }
                                                        
                                                        if (success) {
                                                            console.log('PluctWebView: Successfully submitted URL:', urlToTry);
                                                        }
                                                    }
                                                    
                                                    if (!success) {
                                                        console.error('PluctWebView: All URL attempts failed');
                                                        Android.onError('Could not submit the URL. The website may have changed or is not responding properly.');
                                                        return;
                                                    }
                                                    
                                                    // Monitor for results with enhanced polling and progress updates
                                                    console.log('PluctWebView: Starting result monitoring');
                                                    let attempts = 0;
                                                    const maxAttempts = 45; // Increased from 30 (90 seconds total)
                                                    
                                                    const checkInterval = setInterval(() => {
                                                        attempts++;
                                                        
                                                        // Update status every 5 attempts
                                                        if (attempts % 5 === 0) {
                                                            console.log(`PluctWebView: Still waiting for results (${attempts}/${maxAttempts})`);
                                                        } else {
                                                            console.log('PluctWebView: Checking for results, attempt', attempts);
                                                        }
                                                        
                                                        try {
                                                            const found = checkForTranscript();
                                                            
                                                            if (found) {
                                                                console.log('PluctWebView: Transcript found, processing completed');
                                                                clearInterval(checkInterval);
                                                                Android.onProcessing(false);
                                                                return;
                                                            }
                                                            
                                                            // Check for errors or "no transcript" messages on the page
                                                            const pageText = document.body.textContent || '';
                                                            const errorIndicators = [
                                                                'error', 'failed', 'invalid', 'not found', 'no data'
                                                            ];
                                                            
                                                            for (const indicator of errorIndicators) {
                                                                if (pageText.toLowerCase().includes(indicator)) {
                                                                    console.log(`PluctWebView: Found error indicator: "${indicator}"`);
                                                                    // Don't immediately abort, keep checking for transcript
                                                                }
                                                            }
                                                            
                                                            // Check for timeout
                                                            if (attempts >= maxAttempts) {
                                                                console.log('PluctWebView: Timeout reached');
                                                                clearInterval(checkInterval);
                                                                Android.onError('Timeout waiting for transcript. The process took too long to complete.');
                                                                Android.onProcessing(false);
                                                                return;
                                                            }
                                                        } catch (e) {
                                                            console.error('PluctWebView: Error during transcript check:', e);
                                                            // Don't abort on errors, keep trying
                                                        }
                                                    }, 2000);
                                                    
                                                } catch (error) {
                                                    console.error('PluctWebView: Error in main execution:', error);
                                                    Android.onError('Script execution error: ' + error.message);
                                                    Android.onProcessing(false);
                                                }
                                            }
                                            
                                            // Start the main execution
                                            main();
                                        })();
                                        """.trimIndent()
                                    ) { result ->
                                        Log.d(TAG, "Enhanced JavaScript injection result: $result")
                                    }
                                }, 1000) // Wait 1 second for page to fully load
                            }
                        }

                        override fun onReceivedError(
                            view: WebView?,
                            request: WebResourceRequest?,
                            error: WebResourceError?
                        ) {
                            super.onReceivedError(view, request, error)
                            val errorMsg = "WebView Error: ${error?.description} (Code: ${error?.errorCode})"
                            Log.e(TAG, errorMsg)
                            
                            when (error?.errorCode) {
                                -8 -> { // ERROR_TIMEOUT
                                    statusMessage = "Connection timeout"
                                    showTimeoutDialog = true
                                }
                                -2 -> { // ERROR_HOST_LOOKUP
                                    statusMessage = "Network error"
                                    webViewError = "Network connection failed. Please check your internet connection."
                                    showErrorDialog = true
                                }
                                else -> {
                                    webViewError = errorMsg
                                    showErrorDialog = true
                                }
                            }
                            isProcessing = false
                        }

                        override fun onRenderProcessGone(view: WebView?, detail: RenderProcessGoneDetail?): Boolean {
                            val errorMsg = "WebView Render Process Crashed: ${detail?.didCrash()}"
                            Log.e(TAG, errorMsg)
                            webViewError = errorMsg
                            showErrorDialog = true
                            isProcessing = false
                            return true
                        }
                    }
                
                // Configure WebChromeClient
                webViewInstance.webChromeClient = object : WebChromeClient() {
                        override fun onConsoleMessage(consoleMessage: ConsoleMessage?): Boolean {
                            consoleMessage?.let {
                                // Filter out noise and categorize messages by type
                                val logLevel = when (it.messageLevel()) {
                                    ConsoleMessage.MessageLevel.ERROR -> "ERROR"
                                    ConsoleMessage.MessageLevel.WARNING -> "WARN"
                                    else -> "INFO"
                                }
                                
                                // Enhanced logging with type information
                                Log.d(TAG, "[$logLevel] ${it.message()} -- From line ${it.lineNumber()} of ${it.sourceId()}")
                                
                                // Handle severe JavaScript errors
                                if (it.messageLevel() == ConsoleMessage.MessageLevel.ERROR) {
                                    val errorMsg = it.message() ?: "Unknown error"
                                    if (errorMsg.contains("SyntaxError") || 
                                        errorMsg.contains("ReferenceError") ||
                                        errorMsg.contains("TypeError")) {
                                        // Report critical JS errors back to app
                                        webViewError = "JavaScript Error: $errorMsg"
                                        showErrorDialog = true
                                    }
                                }
                            }
                            return true
                        }
                        
                                                 // Track page load progress
                         override fun onProgressChanged(view: WebView?, newProgress: Int) {
                             super.onProgressChanged(view, newProgress)
                             loadingProgress = newProgress
                             Log.d(TAG, "Loading progress: $newProgress%")
                             
                             when (newProgress) {
                                 0 -> statusMessage = "Starting..."
                                 25 -> statusMessage = "Loading page..."
                                 50 -> statusMessage = "Loading content..."
                                 75 -> statusMessage = "Almost ready..."
                                 100 -> {
                                     val loadTime = System.currentTimeMillis() - startTime
                                     Log.d(TAG, "Page fully loaded in ${loadTime}ms")
                                     statusMessage = "Page loaded, starting automation..."
                                 }
                             }
                         }
                         

                    }
                }
            }
        )

                 // Enhanced processing indicator with detailed status
         if (isProcessing || loadingProgress < 100) {
             Box(
                 modifier = Modifier.fillMaxSize(),
                 contentAlignment = Alignment.Center
             ) {
                 Surface(
                     modifier = Modifier
                         .padding(16.dp)
                         .fillMaxWidth(0.9f),
                     shape = MaterialTheme.shapes.medium,
                     tonalElevation = 4.dp,
                     shadowElevation = 8.dp,
                     color = MaterialTheme.colorScheme.surface
                 ) {
                     Column(
                         horizontalAlignment = Alignment.CenterHorizontally,
                         verticalArrangement = Arrangement.spacedBy(16.dp),
                         modifier = Modifier.padding(24.dp)
                     ) {
                         // Title
                         Text(
                             text = "Processing TikTok URL",
                             style = MaterialTheme.typography.titleLarge,
                             textAlign = TextAlign.Center
                         )
                         
                         // Progress indicator
                         if (loadingProgress > 0 && loadingProgress < 100) {
                             LinearProgressIndicator(
                                 progress = loadingProgress / 100f,
                                 modifier = Modifier
                                     .fillMaxWidth()
                                     .height(8.dp)
                             )
                         } else {
                             CircularProgressIndicator()
                         }
                         
                         // Status message
                         Text(
                             text = statusMessage,
                             style = MaterialTheme.typography.bodyMedium,
                             textAlign = TextAlign.Center
                         )
                         
                         // Show detailed progress info
                         val elapsedTime = (System.currentTimeMillis() - startTime) / 1000
                         Text(
                             text = "Time elapsed: ${elapsedTime}s",
                             style = MaterialTheme.typography.bodySmall,
                             textAlign = TextAlign.Center,
                             color = MaterialTheme.colorScheme.onSurfaceVariant
                         )
                         
                         // Show timeout warning if needed
                         if (webViewLoadTimeout) {
                             Card(
                                 colors = CardDefaults.cardColors(
                                     containerColor = MaterialTheme.colorScheme.errorContainer
                                 ),
                                 modifier = Modifier.fillMaxWidth()
                             ) {
                                 Text(
                                     text = "Loading is taking longer than expected. Please check your internet connection.",
                                     style = MaterialTheme.typography.bodyMedium,
                                     color = MaterialTheme.colorScheme.onErrorContainer,
                                     textAlign = TextAlign.Center,
                                     modifier = Modifier.padding(12.dp)
                                 )
                             }
                         }
                         
                         // Cancel button
                         TextButton(
                             onClick = onClose,
                             colors = ButtonDefaults.textButtonColors(
                                 contentColor = MaterialTheme.colorScheme.primary
                             )
                         ) {
                             Text("Cancel")
                         }
                     }
                 }
             }
         }

        // Enhanced error dialog for WebView errors
        if (showErrorDialog && webViewError != null) {
            AlertDialog(
                onDismissRequest = { showErrorDialog = false },
                icon = { Icon(Icons.Default.Close, contentDescription = null, tint = MaterialTheme.colorScheme.error) },
                title = { Text("WebView Error", style = MaterialTheme.typography.headlineSmall) },
                text = {
                    Column {
                        // Error message
                        Text(
                            text = webViewError!!,
                            modifier = Modifier.padding(vertical = 8.dp),
                            style = MaterialTheme.typography.bodyMedium
                        )
                        
                        // Troubleshooting tips
                        Card(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(top = 16.dp),
                            colors = CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.surfaceVariant
                            )
                        ) {
                            Column(modifier = Modifier.padding(12.dp)) {
                                Text(
                                    text = "Troubleshooting Tips:",
                                    style = MaterialTheme.typography.titleSmall,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                                Spacer(modifier = Modifier.height(8.dp))
                                Text(
                                    text = "• Check your internet connection\n• Try again in a few minutes\n• Consider opening in external browser",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                            }
                        }
                    }
                },
                confirmButton = {
                    Button(
                        onClick = { 
                            showErrorDialog = false
                            // Try to reload the page
                            webView?.reload()
                        }
                    ) {
                        Text("Retry")
                    }
                },
                dismissButton = {
                    TextButton(
                        onClick = { showErrorDialog = false }
                    ) {
                        Text("Dismiss")
                    }
                }
            )
        }

        // Enhanced error dialog for JavaScript errors
        if (showErrorDialog && errorMessage.isNotEmpty()) {
            AlertDialog(
                onDismissRequest = { showErrorDialog = false },
                icon = { Icon(Icons.Default.Close, contentDescription = null, tint = MaterialTheme.colorScheme.error) },
                title = { Text("Processing Error", style = MaterialTheme.typography.headlineSmall) },
                text = {
                    Column {
                        // Error message
                        Text(
                            text = errorMessage,
                            modifier = Modifier.padding(vertical = 8.dp),
                            style = MaterialTheme.typography.bodyMedium
                        )
                        
                        // Additional information
                        Text(
                            text = "The script.tokaudit.io service encountered an error while processing your request.",
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.onSurfaceVariant,
                            modifier = Modifier.padding(top = 8.dp)
                        )
                    }
                },
                confirmButton = {
                    Button(
                        onClick = { 
                            showErrorDialog = false
                            // Try to reload the page
                            webView?.reload()
                        }
                    ) {
                        Text("Retry")
                    }
                },
                dismissButton = {
                    TextButton(
                        onClick = { showErrorDialog = false }
                    ) {
                        Text("Dismiss")
                    }
                }
            )
        }

                 // Enhanced no transcript dialog
         if (showNoTranscriptDialog) {
             AlertDialog(
                 onDismissRequest = { showNoTranscriptDialog = false },
                 icon = { Icon(Icons.Default.ContentCopy, contentDescription = null, tint = MaterialTheme.colorScheme.primary) },
                 title = { Text("No Transcript Available", style = MaterialTheme.typography.headlineSmall) },
                 text = {
                     Column {
                         Text(
                             text = "This video doesn't have subtitles available. You can still manually paste a transcript if you have one.",
                             modifier = Modifier.padding(vertical = 8.dp),
                             style = MaterialTheme.typography.bodyMedium
                         )
                         
                         // Additional information
                         Card(
                             modifier = Modifier
                                 .fillMaxWidth()
                                 .padding(top = 16.dp),
                             colors = CardDefaults.cardColors(
                                 containerColor = MaterialTheme.colorScheme.surfaceVariant
                             )
                         ) {
                             Column(modifier = Modifier.padding(12.dp)) {
                                 Text(
                                     text = "Why this happens:",
                                     style = MaterialTheme.typography.titleSmall,
                                     color = MaterialTheme.colorScheme.onSurfaceVariant
                                 )
                                 Spacer(modifier = Modifier.height(8.dp))
                                 Text(
                                     text = "• The video doesn't have captions\n• The creator didn't add subtitles\n• The video is too new or too old",
                                     style = MaterialTheme.typography.bodySmall,
                                     color = MaterialTheme.colorScheme.onSurfaceVariant
                                 )
                             }
                         }
                     }
                 },
                 confirmButton = {
                     Button(
                         onClick = { 
                             showNoTranscriptDialog = false
                             onClose()
                         }
                     ) {
                         Text("OK")
                     }
                 }
             )
         }
         
         // Enhanced timeout dialog
         if (showTimeoutDialog) {
             AlertDialog(
                 onDismissRequest = { showTimeoutDialog = false },
                 icon = { Icon(Icons.Default.Close, contentDescription = null, tint = MaterialTheme.colorScheme.error) },
                 title = { Text("Connection Timeout", style = MaterialTheme.typography.headlineSmall) },
                 text = {
                     Column {
                         Text(
                             text = "The connection to script.tokaudit.io timed out. Please check your internet connection and try again.",
                             modifier = Modifier.padding(vertical = 8.dp),
                             style = MaterialTheme.typography.bodyMedium
                         )
                         
                         // Progress info
                         val elapsedTime = (System.currentTimeMillis() - startTime) / 1000
                         Text(
                             text = "Time elapsed before timeout: ${elapsedTime}s",
                             style = MaterialTheme.typography.bodySmall,
                             color = MaterialTheme.colorScheme.onSurfaceVariant,
                             modifier = Modifier.padding(top = 8.dp)
                         )
                     }
                 },
                 confirmButton = {
                     Button(
                         onClick = { 
                             showTimeoutDialog = false
                             // Try to reload the page
                             webView?.reload()
                         }
                     ) {
                         Text("Retry")
                     }
                 },
                 dismissButton = {
                     TextButton(
                         onClick = { 
                             showTimeoutDialog = false
                             onClose()
                         }
                     ) {
                         Text("Cancel")
                     }
                 }
             )
         }
         
         // Enhanced WebView failure dialog with fallback options
         if (webViewLoadTimeout && showErrorDialog) {
             AlertDialog(
                 onDismissRequest = { showErrorDialog = false },
                 icon = { Icon(Icons.Default.Close, contentDescription = null, tint = MaterialTheme.colorScheme.error) },
                 title = { Text("WebView Loading Failed", style = MaterialTheme.typography.headlineSmall) },
                 text = {
                     Column {
                         Text(
                             text = "The WebView failed to load script.tokaudit.io. You can try opening it in your external browser instead.",
                             modifier = Modifier.padding(vertical = 8.dp),
                             style = MaterialTheme.typography.bodyMedium
                         )
                         
                         // Troubleshooting tips
                         Card(
                             modifier = Modifier
                                 .fillMaxWidth()
                                 .padding(top = 16.dp),
                             colors = CardDefaults.cardColors(
                                 containerColor = MaterialTheme.colorScheme.surfaceVariant
                             )
                         ) {
                             Column(modifier = Modifier.padding(12.dp)) {
                                 Text(
                                     text = "Troubleshooting Tips:",
                                     style = MaterialTheme.typography.titleSmall,
                                     color = MaterialTheme.colorScheme.onSurfaceVariant
                                 )
                                 Spacer(modifier = Modifier.height(8.dp))
                                 Text(
                                     text = "• Check your internet connection\n• Try again in a few minutes\n• External browser might work better",
                                     style = MaterialTheme.typography.bodySmall,
                                     color = MaterialTheme.colorScheme.onSurfaceVariant
                                 )
                             }
                         }
                     }
                 },
                 confirmButton = {
                     Button(
                         onClick = { 
                             showErrorDialog = false
                             // Open in external browser
                             val tokAuditUrl = "https://www.script.tokaudit.io/"
                             val intent = android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse(tokAuditUrl))
                             try {
                                 context.startActivity(intent)
                                 Log.d(TAG, "Opened script.tokaudit.io in external browser")
                             } catch (e: Exception) {
                                 Log.e(TAG, "Failed to open browser", e)
                             }
                             onClose()
                         }
                     ) {
                         Text("Open in Browser")
                     }
                 },
                 dismissButton = {
                     TextButton(
                         onClick = { 
                             showErrorDialog = false
                             onClose()
                         }
                     ) {
                         Text("Cancel")
                     }
                 }
             )
         }
    }
}

class WebAppInterface(
    private val mContext: Context, 
    private val onTranscript: (String) -> Unit,
    private val onError: (String) -> Unit,
    private val onNoTranscript: () -> Unit,
    private val onProcessing: (Boolean) -> Unit
) {
    @JavascriptInterface
    fun onTranscriptReceived(transcript: String) {
        Log.d("WebAppInterface", "Received transcript: ${transcript.take(100)}...")
        onTranscript(transcript)
    }

    @JavascriptInterface
    fun onError(error: String) {
        Log.e("WebAppInterface", "Received error from JS: $error")
        onError(error)
    }

    @JavascriptInterface
    fun onNoTranscript() {
        Log.d("WebAppInterface", "No transcript available from JS")
        onNoTranscript()
    }

    @JavascriptInterface
    fun onProcessing(processing: Boolean) {
        Log.d("WebAppInterface", "Processing status: $processing")
        onProcessing(processing)
    }
}
